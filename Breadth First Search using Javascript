//Breadth First Search Algorithem
var Row = 4;
var Col = 4;
 
// Direction vectors
var Drow = [-1, 0, 1, 0 ];
var Dcol = [0, 1, 0, -1 ]; 
// Function to check if a cell
function isValid(vis, row, col)
{
    // If cell lies out of bounds
    if (row < 0 || col < 0
        || row >= Row || col >= Col)
        return false;
    // If cell is already visited
    if (vis[row][col])
        return false;
    // Otherwise
    return true;
}
 
// Function to perform the BFS traversal
function bfs( grid, vis,row, col)
{
    // Stores indices of the matrix cells
    var q = [];
 
    // Mark the starting cell as visited
    // and push it into the queue
    q.push([row, col ]);
    vis[row][col] = true;
 
    // Iterate while the queue
    // is not empty
    while (q.length!=0) {
 
        var cell = q[0];
        var x = cell[0];
        var y = cell[1];
 
        console.log( grid[x][y] + " ");
 
        q.shift();
 
        // Go to the adjacent cells
        for (var i = 0; i < 4; i++) {
 
            var adjx = x + Drow[i];
            var adjy = y + Dcol[i];
 
            if (isValid(vis, adjx, adjy)) {
                q.push([adjx, adjy ]);
                vis[adjx][adjy] = true;
            }
        }
    }
}
 
// Driver Code
// Given input matrix
var grid = [[4, 5, 6, 7 ],
                       [8, 9, 10, 11 ],
                       [12, 13, 14, 13 ],
                       [14, 17, 18, 23 ] ];
// Declare the visited array
var vis = Array.from(Array(Row), ()=> Array(Col).fill(false));
bfs(grid, vis, 0, 0);
console.log("Here is the Output");
//Output--
//4 
//5 
//8
//6
//9
//12
//7
//10
//13
//14
//11
//14
//17
//13
//18
//23
//Here is the Output
